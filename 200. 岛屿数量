class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int result = 0;

        if (grid.size() == 0 || grid[0].size() == 0) {
            return 0;
        }

        int height = grid.size(), width = grid[0].size();

        for (int i = 0; i < height; ++i) {
            for (int j = 0; j < width; ++j) {
                if (grid[i][j] == '1') {
                    result++;
                    dfs(grid, i, j, height, width);
                }
            }
        }

        return result;
    }

private:
    //深度优先搜索
    void dfs(vector<vector<char>>& grid, int i, int j, int height, int width) {
        grid[i][j] = '0';

        if (i > 0 && grid[i-1][j] == '1') {
            dfs(grid, i-1, j, height, width);
        }
        if (i < height-1 && grid[i+1][j] == '1') {
            dfs(grid, i+1, j, height, width);
        }
        if (j > 0 && grid[i][j-1] == '1') {
            dfs(grid, i, j-1, height, width);
        }
        if (j < width-1 && grid[i][j+1] == '1') {
            dfs(grid, i, j+1, height, width);
        }
    }
};
