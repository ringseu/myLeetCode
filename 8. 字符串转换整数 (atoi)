class Solution {
public:
    int myAtoi(string str) {
        dropEmpty(str);
        int sign = getSign(str);

        return (sign == 0) ? 0 : getVal(str, sign);
    }

private:
    static int plus_base;
    static int plus_tail;
    static int minus_base;
    static int minus_tail;

    //丢弃开头的空格
    void dropEmpty(string &str) {
        int pos = 0;
        for (int i = 0; i < str.size(); ++i) {
            if (str[i] != ' ') {
                pos = i;
                break;
            }
        }

        if (pos > 0) {
            str = str.substr(pos, str.size()-pos);
        }
    }

    //确定正负号
    int getSign(string &str) {
        if (str.size() == 0) {
            return 0;
        }

        if (str[0] == '+') {
            str = str.substr(1, str.size()-1);
            return 1;
        } else if (str[0] == '-') {
            str = str.substr(1, str.size()-1);
            return -1;
        } else if (str[0] >= '0' && str[0] <= '9') {
            return 1;
        }

        return 0;
    }

    //真正的转换，注意正负数的上限值
    int getVal(string &str, int sign) {
        int result = 0;

        for (int i = 0; i < str.size(); ++i) {
            char c = str[i];
            if (str[i] < '0' || str[i] > '9') { //遇到非法字符，结束
                break;
            }

            int num = c - '0';

            if (sign == 1 && (result > plus_base || (result == plus_base && num >= plus_tail))) { //正数上限
                return INT_MAX;
            } else if (sign == -1 && (result > minus_base || (result == minus_base && num >= minus_tail))) { //负数上限
                return INT_MIN;
            }

            result = result * 10 + num;
        }

        return sign * result;
    }
};

int Solution::plus_base = INT_MAX/10;
int Solution::plus_tail = INT_MAX%10;
int Solution::minus_base = INT_MIN/10 * (-1);
int Solution::minus_tail = INT_MIN%10 * (-1);
