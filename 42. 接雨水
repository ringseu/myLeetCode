class Solution {
public:
    int trap(vector<int>& height) {
        if (height.size() == 0) {
            return 0;
        }

        int result = 0;
        vector<int> max_left(height.size(), 0), max_right(height.size(), 0);

        max_left[0] = 0;
        for (int i = 1; i < height.size(); ++i) {
            if (height[i-1] > max_left[i-1]) {
                max_left[i] = height[i-1];
            } else {
                max_left[i] = max_left[i-1];
            }
        }

        max_right[height.size()-1] = 0;
        for (int i = height.size() - 2; i >= 0; --i) {
            if (height[i+1] > max_right[i+1]) {
                max_right[i] = height[i+1];
            } else {
                max_right[i] = max_right[i+1];
            }
        }

        for (int i = 0; i < height.size(); ++i) {
            if (min(max_left[i], max_right[i]) > height[i]) {
                result += (min(max_left[i], max_right[i]) - height[i]);
            }
        }

        return result;
    }
};
