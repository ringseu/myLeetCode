class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int> > result;

        if (intervals.size() < 2) {
            return intervals;
        }

        sort(intervals.begin(), intervals.end());

        vector<int> tmp = intervals[0];

        for (int i = 1; i < intervals.size(); ++i) {
            vector<int> merged = mergeTwo(tmp, intervals[i]);

            if (merged.size() != 0) {
                tmp = merged;
            } else {
                result.push_back(tmp);
                tmp = intervals[i];
            }
        }

        if (tmp.size() > 0) {
            result.push_back(tmp);
        }

        return result;
    }

private:
    vector<int> mergeTwo(vector<int> left, vector<int> right) { //合并两个区间
        vector<int> result;
        
        if (left[1] >= right[0]) { //相交
            result.push_back(left[0]);
            result.push_back(max(left[1], right[1]));
        }

        return result;
    }
};
