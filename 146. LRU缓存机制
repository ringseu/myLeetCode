class LRUCache {
public:
    LRUCache(int capacity) {
        capacity_ = capacity;
    }

    int get(int key) {
        auto iter = m_key_value_.find(key);
        if (iter != m_key_value_.end()) {
            record(key);
            return iter->second;
        }

        return -1;
    }

    void put(int key, int value) {
        record(key);
        m_key_value_[key] = value;

        if (m_key_value_.size() > capacity_) {
            delete_oldest();
        }
    }

private:
    void record(int key) {
        auto iter = l_key_.begin();
        while (iter != l_key_.end()) {
            if (*iter == key) {
                l_key_.erase(iter);
                break;
            }
            ++iter;
        }

        l_key_.push_front(key);
        return;
    }

    void delete_oldest() {
        auto iter = l_key_.rbegin();
        m_key_value_.erase(*iter);
        l_key_.pop_back();
    }

private:
    int capacity_;
    unordered_map<int, int> m_key_value_;       //key-value
    list<int> l_key_;    //key的顺序
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
