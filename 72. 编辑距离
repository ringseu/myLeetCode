class Solution {
public:
    int minDistance(string word1, string word2) {
        if (word1.size() == 0) {
            return word2.size();
        }

        if (word2.size() == 0) {
            return word1.size();
        }

        vector<vector<int> > dp;
        for (int i = 0; i <= word1.size(); ++i) {
            vector<int> raw(word2.size()+1, 0);
            dp.push_back(raw);
        }

        for (int i = 1; i <= word2.size(); ++i) { //初始化第一行
            dp[0][i] = dp[0][i-1] + 1;
        }

        for (int j = 1; j <= word1.size(); ++j) { //初始化第一列
            dp[j][0] = dp[j-1][0] + 1;
        }

        for (int i = 1; i <= word1.size(); ++i) {
            for (int j = 1; j <= word2.size(); ++j) {
                if (word1[i-1] == word2[j-1]) { //对应位置的值相等，不需要操作
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = min(min(dp[i-1][j-1], dp[i][j-1]), dp[i-1][j]) + 1;
                }
            }
        }

        return dp[word1.size()][word2.size()];
    }
};
