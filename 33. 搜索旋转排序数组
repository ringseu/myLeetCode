class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 0) {
            return -1;
        }

        int trans = searchTransPos(nums);

        if (trans == -1) {
            return binarySearch(nums, target, 0, nums.size()-1);
        } else {
            int left = binarySearch(nums, target, 0, trans-1);
            return left != -1 ? left : binarySearch(nums, target, trans, nums.size()-1);
        }

        return -1;
    }

private:
    int searchTransPos(vector<int>& nums) { //寻找旋转的位置
        if (nums.size() < 2) {
            return -1;
        }

        int begin = 0, end = nums.size()-1;

        while (begin < end) {
            int pos = (end + begin) / 2;
            if (nums[pos] > nums[pos+1]) {
                return pos + 1;
            } else if (nums[pos] < nums[end]) {
                end = pos;
            } else {
                begin = pos;
            }
        }

        return -1;
    }

    int binarySearch(vector<int>& nums, int target, int begin, int end) { //普通二分查找
        while (begin <= end) {
            int pos = (end + begin) / 2;
            if (nums[pos] < target) {
                begin = pos + 1;
            } else if (nums[pos] > target) {
                end = pos - 1;
            } else {
                return pos;
            }
        }

        return -1;
    }
};
